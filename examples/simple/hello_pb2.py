# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: hello.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import descriptor_pb2 as google_dot_protobuf_dot_descriptor__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='hello.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x0bhello.proto\x1a google/protobuf/descriptor.proto\" \n\x10HttpMethodOption\x12\x0c\n\x04name\x18\x01 \x01(\t\"\x1b\n\x0cHelloRequest\x12\x0b\n\x03say\x18\x01 \x01(\t\"\x1e\n\rHelloResponse\x12\r\n\x05reply\x18\x01 \x01(\t2B\n\rSimpleService\x12\x31\n\x05Hello\x12\r.HelloRequest\x1a\x0e.HelloResponse\"\t\x92\x82\x19\x05\n\x03GET:H\n\x0bhttp_method\x12\x1e.google.protobuf.MethodOptions\x18\xa2\x90\x03 \x01(\x0b\x32\x11.HttpMethodOptionb\x06proto3')
  ,
  dependencies=[google_dot_protobuf_dot_descriptor__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)


HTTP_METHOD_FIELD_NUMBER = 51234
http_method = _descriptor.FieldDescriptor(
  name='http_method', full_name='http_method', index=0,
  number=51234, type=11, cpp_type=10, label=1,
  has_default_value=False, default_value=None,
  message_type=None, enum_type=None, containing_type=None,
  is_extension=True, extension_scope=None,
  options=None)


_HTTPMETHODOPTION = _descriptor.Descriptor(
  name='HttpMethodOption',
  full_name='HttpMethodOption',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='HttpMethodOption.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=49,
  serialized_end=81,
)


_HELLOREQUEST = _descriptor.Descriptor(
  name='HelloRequest',
  full_name='HelloRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='say', full_name='HelloRequest.say', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=83,
  serialized_end=110,
)


_HELLORESPONSE = _descriptor.Descriptor(
  name='HelloResponse',
  full_name='HelloResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='reply', full_name='HelloResponse.reply', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=112,
  serialized_end=142,
)

DESCRIPTOR.message_types_by_name['HttpMethodOption'] = _HTTPMETHODOPTION
DESCRIPTOR.message_types_by_name['HelloRequest'] = _HELLOREQUEST
DESCRIPTOR.message_types_by_name['HelloResponse'] = _HELLORESPONSE
DESCRIPTOR.extensions_by_name['http_method'] = http_method

HttpMethodOption = _reflection.GeneratedProtocolMessageType('HttpMethodOption', (_message.Message,), dict(
  DESCRIPTOR = _HTTPMETHODOPTION,
  __module__ = 'hello_pb2'
  # @@protoc_insertion_point(class_scope:HttpMethodOption)
  ))
_sym_db.RegisterMessage(HttpMethodOption)

HelloRequest = _reflection.GeneratedProtocolMessageType('HelloRequest', (_message.Message,), dict(
  DESCRIPTOR = _HELLOREQUEST,
  __module__ = 'hello_pb2'
  # @@protoc_insertion_point(class_scope:HelloRequest)
  ))
_sym_db.RegisterMessage(HelloRequest)

HelloResponse = _reflection.GeneratedProtocolMessageType('HelloResponse', (_message.Message,), dict(
  DESCRIPTOR = _HELLORESPONSE,
  __module__ = 'hello_pb2'
  # @@protoc_insertion_point(class_scope:HelloResponse)
  ))
_sym_db.RegisterMessage(HelloResponse)

http_method.message_type = _HTTPMETHODOPTION
google_dot_protobuf_dot_descriptor__pb2.MethodOptions.RegisterExtension(http_method)

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class SimpleServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Hello = channel.unary_unary(
          '/SimpleService/Hello',
          request_serializer=HelloRequest.SerializeToString,
          response_deserializer=HelloResponse.FromString,
          )


  class SimpleServiceServicer(object):

    def Hello(self, request, context):
      """this is http://c3po/service/SimpleService/Hello
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_SimpleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Hello': grpc.unary_unary_rpc_method_handler(
            servicer.Hello,
            request_deserializer=HelloRequest.FromString,
            response_serializer=HelloResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'SimpleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaSimpleServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def Hello(self, request, context):
      """this is http://c3po/service/SimpleService/Hello
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaSimpleServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def Hello(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """this is http://c3po/service/SimpleService/Hello
      """
      raise NotImplementedError()
    Hello.future = None


  def beta_create_SimpleService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('SimpleService', 'Hello'): HelloRequest.FromString,
    }
    response_serializers = {
      ('SimpleService', 'Hello'): HelloResponse.SerializeToString,
    }
    method_implementations = {
      ('SimpleService', 'Hello'): face_utilities.unary_unary_inline(servicer.Hello),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_SimpleService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('SimpleService', 'Hello'): HelloRequest.SerializeToString,
    }
    response_deserializers = {
      ('SimpleService', 'Hello'): HelloResponse.FromString,
    }
    cardinalities = {
      'Hello': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'SimpleService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
